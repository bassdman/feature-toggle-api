!function(e,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(e="undefined"!=typeof globalThis?globalThis:e||self).useFeatureToggle=i()}(this,(function(){"use strict";function e(e){return"boolean"==typeof e?function(){return e}:e}function i(e,i){var t=e.toLowerCase();return i&&"string"==typeof i&&(t+="#"+i.toLowerCase()),t}function t(t={}){const n={};return Object.keys(t).forEach((l=>{l.startsWith("_")||l.startsWith("$")||(n[i(l)]=e(t[l]))})),n}return function(n={}){const l={datas:{},listeners:{},visibilities:t(n),showLogs:!1,usedPlugins:[]};function r(e,i){(l.listeners[e]||[]).forEach((e=>{e(i)}))}const s=function(e){if(l.showLogs)if("undefined"!=typeof window){var i=-1!=e.indexOf("<b>"),t=-1!=e.indexOf("visible"),n=-1!=e.indexOf("hidden"),r=e.replace("visible","%cvisible");if(r=r.replace("hidden","%chidden"),t)console.log(r,"color:green;font-weight:bold;");else if(n)console.log(r,"color:red;font-weight:bold;");else if(i){var s=[r=r.replace("<b>","%c"),"font-weight:bold;"];console.log.apply(null,s)}else console.log(e)}else{const i=e.replace(/<b>/g,"");console.log(i)}},u=function(e,i){return s(i),s(""),e},o=function(e,i,t,n,l){if(null!=e){var r=e({name:t,variant:n,data:l});return"boolean"==typeof r?r:u(!1,`The ${i} returns ${r}. => Please return true or false. This result (and all non-boolean results) will return false.`)}};function a(t,n,l,r){let s;return s={name:t,variant:n,data:l},s.key=i(s.name,s.variant),null==r||(s.visibilityFunction=e(r),s.result=s.visibilityFunction({name:s.name,variant:s.variant,data:s.data||{},_internalCall:!0,description:"When attaching a function, the result must be calculated internally. You can filter this out with the _internalCall:true -Flag."})),s}function f(e,t,n){const r=l.visibilities;if(s(`\nCheck Visibility of <b>Feature "${e}", variant "${null==t?"":t}"${n?" with data "+JSON.stringify(n):""}.`),null==e)throw new Error('The attribute "name" is required for tag <feature></feature>. Example: <feature name="aname"></feature>');var a=r._required,f=null!=r._required,d=o(a,"requiredVisibility",e,t,n),c=i(e,t),b=r[c],g=null!=r[c],h=o(b,"visibility function",e,t,n),v=null!=t,y=r[i(e,null)],p=o(y,"visibility function (only name)",e,t,n),m=r._default,w=null!=r._default,T=o(m,"defaultVisibility",e,t,n);if(f){if(f&&!0===d)s("The requiredVisibility rule returns true. This feature will be shown when no other rule rejects it.");else if(f&&!1===d)return u(!1,"The requiredVisibility rule returns false. This feature will be hidden.")}else s("No requiredVisibility rule specified for this feature.");return g?u(h,`The visibility rule returns ${h}. This feature will be ${h?"visible":"hidden"}.`):(s("No visibility rule found matching name and variant."),v&&"boolean"==typeof p?u(p,`Found a visibility rule for name ${e} without variants. The rule returns ${p}. => This feature will be ${p?"visible":"hidden"}.`):(v&&s(`No rules found for name ${e} without variants.`),w?u(T,`Found a defaultVisibility rule. The rule returns ${T}. => This feature will be ${T?"visible":"hidden"}.`):(s("No default rule found."),f?u(!0,"Only the requiredVisibility rule was found. This returned true. => This feature will be visible."):u(!1,"No rules were found. This feature will be hidden."))))}const d={name:"feature-toggle-api",setData:function(e,i,t){if(null==e)throw new Error("setData(): The name must of the feature must be defined, but ist undefined");const n=a(e,null!=t?i:void 0,t||i);l.datas[n.key]=n.data,r("visibilityrule",n)},on(e,i,t){l.listeners[e]=l.listeners[e]||[],l.listeners[e].push(i),r("registerEvent",{type:e}),null!=t&&t.ignorePreviousRules||Object.keys(l.visibilities).forEach((e=>{const t=function(e){const i=e.split("#");return{name:i[0],variant:i.length>1?i[1]:void 0,data:l.datas[e]}}(e),n=l.visibilities[e];t.result=n(t),i(t)}))},trigger:r,showLogs:function(e){l.showLogs=null==e||e},isVisible:(e,i,t)=>(console.log("featureToggle.isVisible is deprecated. use featureToggle.isActive instead. This function will be removed in one of the next major versions."),f(e,i,t)),isActive:f,setFlag(e,i,t,n){const s=function(e,i,t,n){if(null==e)throw new Error("feature.visibility(): 1st parameter name must be defined");if(1==arguments.length)throw new Error("feature.visibility(): 2nd parameter name must be a boolean or function, but is empty");let l=null,r=null,s=null;return null==t&&null==n?s=i:null==n?(l=i,s=t):(l=i,r=t,s=n),{name:e,variant:l,data:r,result:s}}(e,i,t,n),u=a(s.name,s.variant,s.data,s.result);l.visibilities[u.key]=u.visibilityFunction,l.datas[u.key]=u.data,r("visibilityrule",u)},visibility:function(e,i,t,n){console.log("featureToggle.visibility is deprecated. use featureToggle.setVisibility instead. This function will be removed in one of the next major versions."),d.setFlag(e,i,t,n)},requiredVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),d.setRequiredFlag(e)},defaultVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),d.setDefaultFlag(e)},setRequiredFlag(i){if("function"!=typeof i)throw new Error("feature.setRequiredFlag(): 1st parameter must be a function, but is "+typeof i);l.visibilities._required=e(i)},setDefaultFlag(i){if("function"!=typeof i)throw new Error("feature.defaultVisibility(): 1st parameter must be a function, but is "+typeof i);l.visibilities._default=e(i)},addPlugin:function(e){l.usedPlugins.includes(e)||(e(d),l.usedPlugins.push(e))}};return function(e){n.$default&&e.setDefaultFlag(n.$default),n.$required&&e.setRequiredFlag(n.$required);const i=[...n.$plugins||[],...n._plugins||[]];n._plugins&&console.log("useFeatureToggle({_plugins:[]}): Key _plugins is deprecated. Use $plugins instead. This attribute will be removed in one of the next major versions."),i.length&&i.forEach((i=>{if("function"!=typeof i)throw new Error("featuretoggleapi()-constructor: config.plugins needs functions as entries, not "+typeof i+".");i(e)})),r("init")}(d),d}}));
//# sourceMappingURL=feature-toggle.umd.min.js.map
