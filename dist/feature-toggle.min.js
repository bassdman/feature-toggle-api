function e(e={}){let t;return t=e.useMockedWindow?{isMocked:!0,decodeURIComponent:function(e){return e}}:window,e=Object.assign({},{url:t.isMocked?"":t.location.href,prefix:""},e),function(i){i.url=e.url;const n=function(e,t){var i={};if(!e)return[];var n=e.split("?");return n.length<2?[]:(n[1].split("&").forEach((function(e){var n=e.split("=");n[0]=t.decodeURIComponent(n[0]),n[1]="true"===t.decodeURIComponent(n[1]),i[n[0]]="undefined"===n[1]||n[1]})),i)}(e.url,t),r=e.prefix;return Object.keys(n).forEach((e=>{if(!e.startsWith(r))return;const t=e.replace(r,"");i.visibility(t,n[e])})),{name:"urlplugin"}}}const t={renderedTag:"div",featureTagName:"feature",tagAttributeName:"tag",nameAttributeName:"name",variantAttributeName:"variant",dataAttributeName:"data",displayAttributeName:"display",defaultDisplay:"block"};function i(e={}){function i(t,i){const n=t.getAttribute(e.tagAttributeName)||e.renderedTag,r=Array.from(t.attributes);let a="";r.forEach((e=>{a+=` ${e.nodeName}="${e.nodeValue.replace(/"/g,"&quot;")}"`}));const l=i?t.getAttribute(e.displayAttributeName)||e.defaultDisplay:"none";t.outerHTML=`<${n}  style="display:${l}" _feature="true" ${a}>${t.innerHTML}</${n}>`}return e=Object.assign({},t,e),function(t){return window.document.querySelectorAll(e.featureTagName).forEach((e=>{i(e,!1)})),t.on("visibilityrule",(function(n){var r=`[_feature][${e.nameAttributeName}="${n.name}"]`;n.variant&&(r+=`[${e.variantAttributeName}="${n.variant}"]`),document.querySelectorAll(r).forEach((r=>{const a=function(e){try{return JSON.parse(e)}catch(t){return isNaN(parseFloat(e))?e:parseFloat(e)}}(r.getAttribute(e.dataAttributeName));i(r,t.isVisible(n.name,n.variant,a))}))})),{name:"htmlplugin"}}}function n(e){return"boolean"==typeof e?function(){return e}:e}function r(e,t){var i=e.toLowerCase();return t&&"string"==typeof t&&(i+="#"+t.toLowerCase()),i}function a(e={}){const t={};return Object.keys(e).forEach((i=>{i.startsWith("_")||(t[r(i)]=n(e[i]))})),t}function l(e={},t={}){const i={datas:{},listeners:{},visibilities:a(e),showLogs:!1,usedPlugins:[]};function l(e,t){e(t)}function u(e,t){(i.listeners[e]||[]).forEach((e=>{e(t)}))}const o=function(e){if(i.showLogs)if("undefined"!=typeof window){var t=-1!=e.indexOf("<b>"),n=-1!=e.indexOf("visible"),r=-1!=e.indexOf("hidden"),a=e.replace("visible","%cvisible");if(a=a.replace("hidden","%chidden"),n)console.log(a,"color:green;font-weight:bold;");else if(r)console.log(a,"color:red;font-weight:bold;");else if(t){var l=[a=a.replace("<b>","%c"),"font-weight:bold;"];console.log.apply(null,l)}else console.log(e)}else{const t=e.replace(/<b>/g,"");console.log(t)}},s=function(e,t){return o(t),o(""),e},f=function(e,t,i,n,r){if(null!=e){var a=e({name:i,variant:n,data:r});return"boolean"==typeof a?a:s(!1,`The ${t} returns ${a}. => Please return true or false. This result (and all non-boolean results) will return false.`)}};function d(e,t,i,a){let l;return l={name:e,variant:t,data:i},l.key=r(l.name,l.variant),null==a||(l.visibilityFunction=n(a),l.result=l.visibilityFunction({name:l.name,variant:l.variant,data:l.data||{},_internalCall:!0,description:"When attaching a function, the result must be calculated internally. You can filter this out with the _internalCall:true -Flag."})),l}const c={name:"feature-toggle-api",setData:function(e,t,n){if(null==e)throw new Error("setData(): The name must of the feature must be defined, but ist undefined");const r=d(e,null!=n?t:void 0,n||t);i.datas[r.key]=r.data,u("visibilityrule",r)},on:function(e,t,n){i.listeners[e]=i.listeners[e]||[],i.listeners[e].push(t),u("registerEvent",{type:e}),null!=n&&n.ignorePreviousRules||Object.keys(i.visibilities).forEach((e=>{const n=function(e){const t=e.split("#");return{name:t[0],variant:t.length>1?t[1]:void 0,data:i.datas[e]}}(e),r=i.visibilities[e];n.result=r(n),t(n)}))},trigger:u,showLogs:function(e){i.showLogs=null==e||e},isVisible:function(e,t,n){const a=i.visibilities;if(o(`\nCheck Visibility of <b>Feature "${e}", variant "${null==t?"":t}"${n?" with data "+JSON.stringify(n):""}.`),null==e)throw new Error('The attribute "name" is required for tag <feature></feature>. Example: <feature name="aname"></feature>');var l=a._required,u=null!=a._required,d=f(l,"requiredVisibility",e,t,n),c=r(e,t),b=a[c],g=null!=a[c],h=f(b,"visibility function",e,t,n),y=null!=t,v=a[r(e,null)],m=f(v,"visibility function (only name)",e,t,n),p=a._default,w=null!=a._default,T=f(p,"defaultVisibility",e,t,n);if(u){if(u&&!0===d)o("The requiredVisibility rule returns true. This feature will be shown when no other rule rejects it.");else if(u&&!1===d)return s(!1,"The requiredVisibility rule returns false. This feature will be hidden.")}else o("No requiredVisibility rule specified for this feature.");return g?s(h,`The visibility rule returns ${h}. This feature will be ${h?"visible":"hidden"}.`):(o("No visibility rule found matching name and variant."),y&&"boolean"==typeof m?s(m,`Found a visibility rule for name ${e} without variants. The rule returns ${m}. => This feature will be ${m?"visible":"hidden"}.`):(y&&o(`No rules found for name ${e} without variants.`),w?s(T,`Found a defaultVisibility rule. The rule returns ${T}. => This feature will be ${T?"visible":"hidden"}.`):(o("No default rule found."),u?s(!0,"Only the requiredVisibility rule was found. This returned true. => This feature will be visible."):s(!1,"No rules were found. This feature will be hidden."))))},setFlag(e,t,n,r){const a=function(e,t,i,n){if(null==e)throw new Error("feature.visibility(): 1st parameter name must be defined");if(1==arguments.length)throw new Error("feature.visibility(): 2nd parameter name must be a boolean or function, but is empty");let r=null,a=null,l=null;return null==i&&null==n?l=t:null==n?(r=t,l=i):(r=t,a=i,l=n),{name:e,variant:r,data:a,result:l}}(e,t,n,r),l=d(a.name,a.variant,a.data,a.result);i.visibilities[l.key]=l.visibilityFunction,i.datas[l.key]=l.data,u("visibilityrule",l)},visibility:function(e,t,i,n){console.log("featureToggle.visibility is deprecated. use featureToggle.setVisibility instead. This function will be removed in one of the next major versions."),c.setFlag(e,t,i,n)},requiredVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),c.setRequiredFlag(e)},defaultVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),c.setDefaultFlag(e)},setRequiredFlag(e){if("function"!=typeof e)throw new Error("feature.setRequiredFlag(): 1st parameter must be a function, but is "+typeof e);i.visibilities._required=n(e)},setDefaultFlag(e){if("function"!=typeof e)throw new Error("feature.defaultVisibility(): 1st parameter must be a function, but is "+typeof e);i.visibilities._default=n(e)},addPlugin:function(e){i.usedPlugins.includes(e)||(l(e,c),i.usedPlugins.push(e))}};return function(e){if(t._plugins){if(!Array.isArray(t._plugins))throw new Error("featuretoggleapi()-constructor: config.plugins must be an array.");t._plugins.forEach((t=>{if("function"!=typeof t)throw new Error("featuretoggleapi()-constructor: config.plugins needs functions as entries, not "+typeof t+".");l(t,e)}))}u("init")}(c),c.setDefaultFlag,c}export{i as htmlPlugin,e as urlPlugin,l as useFeatureToggle};
//# sourceMappingURL=feature-toggle.min.js.map
