function e(e={}){let t;return t=e.useMockedWindow?{isMocked:!0,decodeURIComponent:function(e){return e}}:window,e=Object.assign({},{url:t.isMocked?"":t.location.href,prefix:""},e),function(i){i.url=e.url;const n=function(e,t){var i={};if(!e)return[];var n=e.split("?");return n.length<2?[]:(n[1].split("&").forEach((function(e){var n=e.split("=");n[0]=t.decodeURIComponent(n[0]),n[1]="true"===t.decodeURIComponent(n[1]),i[n[0]]="undefined"===n[1]||n[1]})),i)}(e.url,t),r=e.prefix;return Object.keys(n).forEach((e=>{if(!e.startsWith(r))return;const t=e.replace(r,"");i.visibility(t,n[e])})),{name:"urlplugin"}}}const t={renderedTag:"div",featureTagName:"feature",tagAttributeName:"tag",nameAttributeName:"name",variantAttributeName:"variant",dataAttributeName:"data",displayAttributeName:"display",defaultDisplay:"block"};function i(e={}){function i(t,i){const n=t.getAttribute(e.tagAttributeName)||e.renderedTag,r=Array.from(t.attributes);let l="";r.forEach((e=>{l+=` ${e.nodeName}="${e.nodeValue.replace(/"/g,"&quot;")}"`}));const a=i?t.getAttribute(e.displayAttributeName)||e.defaultDisplay:"none";t.outerHTML=`<${n}  style="display:${a}" _feature="true" ${l}>${t.innerHTML}</${n}>`}return e=Object.assign({},t,e),function(t){return window.document.querySelectorAll(e.featureTagName).forEach((e=>{i(e,!1)})),t.on("visibilityrule",(function(n){var r=`[_feature][${e.nameAttributeName}="${n.name}"]`;n.variant&&(r+=`[${e.variantAttributeName}="${n.variant}"]`),document.querySelectorAll(r).forEach((r=>{const l=function(e){try{return JSON.parse(e)}catch(t){return isNaN(parseFloat(e))?e:parseFloat(e)}}(r.getAttribute(e.dataAttributeName));i(r,t.isVisible(n.name,n.variant,l))}))})),{name:"htmlplugin"}}}function n(e){return"boolean"==typeof e?function(){return e}:e}function r(e,t){var i=e.toLowerCase();return t&&"string"==typeof t&&(i+="#"+t.toLowerCase()),i}function l(e={}){const t={};return Object.keys(e).forEach((i=>{i.startsWith("_")||i.startsWith("$")||(t[r(i)]=n(e[i]))})),t}function a(e={}){const t={datas:{},listeners:{},visibilities:l(e),showLogs:!1,usedPlugins:[]};function i(e,i){(t.listeners[e]||[]).forEach((e=>{e(i)}))}const a=function(e){if(t.showLogs)if("undefined"!=typeof window){var i=-1!=e.indexOf("<b>"),n=-1!=e.indexOf("visible"),r=-1!=e.indexOf("hidden"),l=e.replace("visible","%cvisible");if(l=l.replace("hidden","%chidden"),n)console.log(l,"color:green;font-weight:bold;");else if(r)console.log(l,"color:red;font-weight:bold;");else if(i){var a=[l=l.replace("<b>","%c"),"font-weight:bold;"];console.log.apply(null,a)}else console.log(e)}else{const t=e.replace(/<b>/g,"");console.log(t)}},u=function(e,t){return a(t),a(""),e},s=function(e,t,i,n,r){if(null!=e){var l=e({name:i,variant:n,data:r});return"boolean"==typeof l?l:u(!1,`The ${t} returns ${l}. => Please return true or false. This result (and all non-boolean results) will return false.`)}};function o(e,t,i,l){let a;return a={name:e,variant:t,data:i},a.key=r(a.name,a.variant),null==l||(a.visibilityFunction=n(l),a.result=a.visibilityFunction({name:a.name,variant:a.variant,data:a.data||{},_internalCall:!0,description:"When attaching a function, the result must be calculated internally. You can filter this out with the _internalCall:true -Flag."})),a}const f={name:"feature-toggle-api",setData:function(e,n,r){if(null==e)throw new Error("setData(): The name must of the feature must be defined, but ist undefined");const l=o(e,null!=r?n:void 0,r||n);t.datas[l.key]=l.data,i("visibilityrule",l)},on:function(e,n,r){t.listeners[e]=t.listeners[e]||[],t.listeners[e].push(n),i("registerEvent",{type:e}),null!=r&&r.ignorePreviousRules||Object.keys(t.visibilities).forEach((e=>{const i=function(e){const i=e.split("#");return{name:i[0],variant:i.length>1?i[1]:void 0,data:t.datas[e]}}(e),r=t.visibilities[e];i.result=r(i),n(i)}))},trigger:i,showLogs:function(e){t.showLogs=null==e||e},isVisible:function(e,i,n){const l=t.visibilities;if(a(`\nCheck Visibility of <b>Feature "${e}", variant "${null==i?"":i}"${n?" with data "+JSON.stringify(n):""}.`),null==e)throw new Error('The attribute "name" is required for tag <feature></feature>. Example: <feature name="aname"></feature>');var o=l._required,f=null!=l._required,d=s(o,"requiredVisibility",e,i,n),c=r(e,i),b=l[c],g=null!=l[c],h=s(b,"visibility function",e,i,n),v=null!=i,m=l[r(e,null)],y=s(m,"visibility function (only name)",e,i,n),p=l._default,w=null!=l._default,T=s(p,"defaultVisibility",e,i,n);if(f){if(f&&!0===d)a("The requiredVisibility rule returns true. This feature will be shown when no other rule rejects it.");else if(f&&!1===d)return u(!1,"The requiredVisibility rule returns false. This feature will be hidden.")}else a("No requiredVisibility rule specified for this feature.");return g?u(h,`The visibility rule returns ${h}. This feature will be ${h?"visible":"hidden"}.`):(a("No visibility rule found matching name and variant."),v&&"boolean"==typeof y?u(y,`Found a visibility rule for name ${e} without variants. The rule returns ${y}. => This feature will be ${y?"visible":"hidden"}.`):(v&&a(`No rules found for name ${e} without variants.`),w?u(T,`Found a defaultVisibility rule. The rule returns ${T}. => This feature will be ${T?"visible":"hidden"}.`):(a("No default rule found."),f?u(!0,"Only the requiredVisibility rule was found. This returned true. => This feature will be visible."):u(!1,"No rules were found. This feature will be hidden."))))},setFlag(e,n,r,l){const a=function(e,t,i,n){if(null==e)throw new Error("feature.visibility(): 1st parameter name must be defined");if(1==arguments.length)throw new Error("feature.visibility(): 2nd parameter name must be a boolean or function, but is empty");let r=null,l=null,a=null;return null==i&&null==n?a=t:null==n?(r=t,a=i):(r=t,l=i,a=n),{name:e,variant:r,data:l,result:a}}(e,n,r,l),u=o(a.name,a.variant,a.data,a.result);t.visibilities[u.key]=u.visibilityFunction,t.datas[u.key]=u.data,i("visibilityrule",u)},visibility:function(e,t,i,n){console.log("featureToggle.visibility is deprecated. use featureToggle.setVisibility instead. This function will be removed in one of the next major versions."),f.setFlag(e,t,i,n)},requiredVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),f.setRequiredFlag(e)},defaultVisibility:function(e){console.log("featureToggle.requiredVisibility is deprecated. use featureToggle.setRequiredFlag instead. This function will be removed in one of the next major versions."),f.setDefaultFlag(e)},setRequiredFlag(e){if("function"!=typeof e)throw new Error("feature.setRequiredFlag(): 1st parameter must be a function, but is "+typeof e);t.visibilities._required=n(e)},setDefaultFlag(e){if("function"!=typeof e)throw new Error("feature.defaultVisibility(): 1st parameter must be a function, but is "+typeof e);t.visibilities._default=n(e)},addPlugin:function(e){t.usedPlugins.includes(e)||(e(f),t.usedPlugins.push(e))}};return function(t){const n=[...e.$plugins||[],...e._plugins||[]];e._plugins&&console.log("useFeatureToggle({_plugins:[]}): Key _plugins is deprecated. Use $plugins instead. This attribute will be removed in one of the next major versions."),n.length&&n.forEach((e=>{if("function"!=typeof e)throw new Error("featuretoggleapi()-constructor: config.plugins needs functions as entries, not "+typeof e+".");e(t)})),i("init")}(f),f}export{i as htmlPlugin,e as urlPlugin,a as useFeatureToggle};
//# sourceMappingURL=feature-toggle.min.js.map
