{"version":3,"file":"url-plugin.umd.min.js","sources":["../src/plugins/urlplugin/plugin-url.ts"],"sourcesContent":["interface URLPluginConfig{\n    useMockedWindow?: boolean,\n    url?: string,\n    prefix?: string\n\n}\n\nfunction useWindowMock(){\n    return {\n        isMocked: true,\n        decodeURIComponent:function(param1){\n            return param1;\n        }\n    }\n}\n\ndeclare global {\n    interface Window {\n      isMocked: boolean\n    }\n  }\n\n  declare var window: Window;\n\nfunction parseValue(value){\n    if(value === 'true')\n        return true;\n    return false;\n}\n\nfunction getParams(url,window) {\n    var params = {};\n    if (!url) \n        return [];\n    \n    var urlparts = url.split(\"?\");\n\n    //no params available for url\n    if(urlparts.length < 2)\n        return [];\n\n    const parts = urlparts[1].split('&');\n\n    parts.forEach(function (part) {\n    var pair = part.split('=');\n    pair[0] = window.decodeURIComponent(pair[0]);\n    pair[1] = parseValue(window.decodeURIComponent(pair[1]));\n    params[pair[0]] = (pair[1] !== 'undefined') ?\n        pair[1] : true;\n    });\n\n    return params;\n  }\n\n function urlPlugin(config: URLPluginConfig={}) {\n    let _window;\n\n    if(config.useMockedWindow)\n        _window = useWindowMock();\n    else\n        _window = window;\n    \n    config = Object.assign({},{\n        url: _window.isMocked ? \"\" : _window.location.href,\n        prefix: \"\"\n    },config);\n\n    \n\n    return function(api){\n        api.url = config.url;\n        const urlparams = getParams(config.url,_window);\n        const prefix = config.prefix;\n\n        Object.keys(urlparams).forEach(key => {\n            if(!key.startsWith(prefix))\n                return;\n                \n            const keyWithoutPrefix = key.replace(prefix,\"\");\n            api.visibility(keyWithoutPrefix,urlparams[key]);\n        });\n\n        return {name: 'urlplugin'};\n    }\n\n}\n\nexport {\n    urlPlugin\n}"],"names":["config","_window","useMockedWindow","isMocked","decodeURIComponent","param1","window","Object","assign","url","location","href","prefix","api","urlparams","params","urlparts","split","length","forEach","part","pair","getParams","keys","key","startsWith","keyWithoutPrefix","replace","visibility","name"],"mappings":"0QAsDC,SAAmBA,EAAwB,IACxC,IAAIC,EAcJ,OAXIA,EADDD,EAAOE,gBAjDH,CACHC,UAAU,EACVC,mBAAmB,SAASC,GACxB,OAAOA,IAiDDC,OAEdN,EAASO,OAAOC,OAAO,GAAG,CACtBC,IAAKR,EAAQE,SAAW,GAAKF,EAAQS,SAASC,KAC9CC,OAAQ,IACVZ,GAIK,SAASa,GACZA,EAAIJ,IAAMT,EAAOS,IACjB,MAAMK,EAzCd,SAAmBL,EAAIH,GACnB,IAAIS,EAAS,CAAE,EACf,IAAKN,EACD,MAAO,GAEX,IAAIO,EAAWP,EAAIQ,MAAM,KAGzB,OAAGD,EAASE,OAAS,EACV,IAEGF,EAAS,GAAGC,MAAM,KAE1BE,SAAQ,SAAUC,GACxB,IAAIC,EAAOD,EAAKH,MAAM,KACtBI,EAAK,GAAKf,EAAOF,mBAAmBiB,EAAK,IACzCA,EAAK,GArBQ,SAqBQf,EAAOF,mBAAmBiB,EAAK,IACpDN,EAAOM,EAAK,IAAmB,cAAZA,EAAK,IACpBA,EAAK,EACT,IAEON,EACT,CAmBwBO,CAAUtB,EAAOS,IAAIR,GACjCW,EAASZ,EAAOY,OAUtB,OARAL,OAAOgB,KAAKT,GAAWK,SAAQK,IAC3B,IAAIA,EAAIC,WAAWb,GACf,OAEJ,MAAMc,EAAmBF,EAAIG,QAAQf,EAAO,IAC5CC,EAAIe,WAAWF,EAAiBZ,EAAUU,GAAK,IAG5C,CAACK,KAAM,YACjB,CAEL"}